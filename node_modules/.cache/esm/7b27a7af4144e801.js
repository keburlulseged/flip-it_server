let mongoose,bcrypt;_414‍.x([["default",()=>_414‍.o]]);_414‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_414‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);

const Schema = mongoose;

const userSchema = new Schema(
  {
    name: {
      type: String,
      trim: true,
      required: "Name is required",
    },
    email: {
      type: String,
      trim: true,
      required: "Email is required",
      unique: true,
    },
    password: {
      type: String,
      required: true,
      min: 6,
      max: 64,
    },
    stripe_account_id: "",
    stripe_seller: {},
    stripeSession: {},
  },
  {
    timestamps: true,
  }
);

// password hashing for first time user registration
userSchema.pre("save", function (next) {
  let user = this;
  if (user.isModified("password")) {
    return bcrypt.hash(user.password, 12, function (err, hash) {
      if (err) {
        _414‍.g.console.log("BCRYPT HASS ERR ", err);
        return next(err);
      }
      user.password = hash;
      return next();
    });
  } else {
    return next();
  }
});

_414‍.d(mongoose.model("User", userSchema));
